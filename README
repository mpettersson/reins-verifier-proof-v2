VERIFYING REINS IN COQ


DEPENDECIES:
    Coq 8.3pl2 - 8.3pl5 (8.4 does not work)
      http://coq.inria.fr/coq-8.3
    OCaml 3.12 or higher
      http://caml.inria.fr/download.en.html


COMPILING:
    Go to reins-verifier-proof directory and run 'make'
    This compiles the Model, REINS, and Test folders.
    Compliation takes about an hour and is very resource (memory) intensive towards
      the end.


OUTPUT:
    After compilation, a check.exe executable is created in the Test folder.
    Execute with the binary that needs to be checked as an input parameter.

	  example: ./check.exe maskOnWrongReg.exe

    The program reports either
	  - "fail" if the binary does not meet the constraints or
	  - "pass" if the binary has successfully been rewritten


TESTING:
    Included in the Test folder are some hand crafted test binaries that purposely
      pass or fail according to their name.
	
	callNotAtEnd: call instruction not at end of chunk boundary (fails)
	callThruIAT: calling through an IAT address (passes)
	interrupt & syscall: has these instructions (fails)
	maskOnWrongReg: not anding the correct register before jmp/call (fails)
	noAndBeforeCall: not anding the register before a call (fails)
	safe: conforms to the constraints (passes)
	wrongMask: has the mask 0xeffffff0 instead of 0x0ffffff0 (fails)


NOTE: The format of sections were changed due to speed, memory, and crash 
      concerns; what was a list of bytes is now a list of list of bytes.  Also note 
	  that each section contains bounds information that is checked against the low 
	  memory boundary. 


NOTE: To avoid updating reinsverif.ml each time changes are made, Word.int 
      (in RockSalt) was changed to Word.wint (in REINS--in other words this for 
      compatability with OCaml).  


NOTE: To work around some memory issues in Coq, the process of converting the
      grammars defined in Model/Decode.v and REINS/ReinsVerifierDFA.v to DFAs for
      efficient matching is done as a separate manual step. This conversion is done
      by DFACompiler.v, and the output is manually put in CompiledDFAs.v.
      DFACompiler.v is not part of the standard compilation process (i.e. it is not
      referenced in the Makefiles), but must be run any time any of the grammars are
      modified.


NACL CONSTRAINTS:
  1.  Binary not writeable after load. 
  2.  Statically Linked:
        Start at 0
		text at 64K
  3.  Indirect control flow by nacljump
  4.  Binary padded to nearest page with 'hlt' instruction.
  5.  No instructions overlap the 32Byte boundary.  
  6.  All valid instructions are reachable by fall through disassembly.
  7.  All direct control flow targets valid instructions.


REINS CONSTRAINTS:
  1.  All execuatable sections reside in low memory.
  2.  All exported symbols target low memory chunck boundaries.  
  3.  Static branches target low memory chunck boundaries.
  4.  All non Import Address Tables (IAT) indirect control flow is masked. 
  5.  All IAT indirect control flow have masked return addresses.
        (must end on chunck boundary)
  6.  No trap instructions (int/syscall)
  7.  No instruction spans chunck boundary.
  8.  Fall through disassembly.


