======================
VERIFYING REINS IN COQ
======================
The following is provided in this README file:
    I.    Introduction
    II.   Dependencies
    III.  Code Compilation
    IV.   Execution & Output
    V.    Testing (EXEs)
    VI.   Structure
    VII.  Important Notes
    VIII. REINS & The REINS Verifier 


I. INTRODUCTION
===============
    This collection of files serves as a formal verifier for rewritten binaries 
    produced by the native code REwriting and IN-lining System (REINS), as 
    presented in "Securing Untrusted Code via Compiler-Agnostic Binary Rewriting" 
    by Richard Wartell, Viswath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 

    The Coq code for the REINS verifier is based on the RockSalt project 
    (sos.cse.lehigh.edu/gonative/) by Greg Morrisett, Gang Tan, Joseph Tassarotti, 
    Jean-Baptiste Tristan, and Deward Gan.

    The University of Texas at Dallas students who have worked on this project are 
    Benjamin Ferrell, Gil Lundquist, Kenneth Miller, Matthew Pettersson, Justin Sahs, 
    and Brett Webster.

    This project is free software; you can redistribute it and/or modify it under 
    the terms of the GNU General Public License as published by the Free Software 
    Foundation; either version 2 of the License, or (at your option) any later version.


II. DEPENDECIES
===============
    Coq 8.3pl2 - 8.3pl5 (8.4 does not work)
		http://coq.inria.fr/coq-8.3
    OCaml 3.12 or higher
		http://caml.inria.fr/download.en.html


III. CODE COMPILATION
====================== 
    
    LINUX/MAC
    ---------
        Go to reins-verifier-proof directory and run 'make', this compiles the Model, 
        REINS, and Test folders.  Compliation takes about an hour (for a relatively 
        current machine with 4GB of ram) and is very resource (memory) intensive 
        towards the end (time varies according to machine and the amount of ram). 

    WINDOWS
	-------
        We strongly suggest that WIN users install CYGWIN, thus allowing the 'make' 
	    command (See "COMPILING IN LINUX/MAC"), provided that all dependencies are met.  
	    However, if a minimal installation with the listed dependencies only is desired, 
        users should compile in the following order:
		    /Model
		    	coqc Coqlib.v
		    	coqc Tacs.v
		    	coqc Maps.v
		    	coqc Bits.v
		    	coqc X86Syntax.v
		    	coqc Monad.v
		    	coqc Parser.v
		    	coqc Decode.v
		    	coqc RTL.v
		    	coqc X86Semantcis.v
		    	coqc CheckDeterministic.v
			/REINS
		    	coqc -I "../Model" Int32.v
		    	coqc -I "../Model" PEFormat.v
		    	coqc -I "../Model" PETraversal.v
		    	coqc -I "../Model" ReinsVerifierDFA.v
		    	coqc -I "../Model" CompiledDFAs.v
		    	coqc -I "../Model" DFACorrectness.v
		    	coqc -I "../Model" REINSjmp.v
		    	coqc -I "../Model" X86Lemmas.v
		    	coqc -I "../Model" ReinsVerifier.v
		    	coqc -I "../Model" ReinsVerifierCorrectness.v


IV. EXECUTION & OUTPUT
======================
    After compilation, a check.exe executable is created in the Test folder.
    Execute with the binary that needs to be checked as an input parameter.

	Example: ./check.exe maskOnWrongReg.exe

    The program (check.exe), given an executable, will produce one of the following results:
		"fail" - The binary does not meet REINS constraints or
		"pass" - The binary has successfully been rewritten according to REINS constraints


V. TESTING (EXEs)
=================
    Included in the Test folder are some hand crafted test binaries that purposely
    pass or fail according to their associated REINS property (see Section VIII. 
	REINS VERIFIER EXPLAINED for more information):
		callNotAtEnd.exe	- [Fail] Call not at end of Chunck Boundary
		callThruIAT.exe		- [Pass] No Violations with Call through IAT
		interrupt.exe		- [Fail] Disallowed Interrupt
		syscall.ese			- [Fail] Disallowed System Call
		maskOnWrongReg		- [Fail] No Register Mask (anding the register) on a JMP
		noAndBeforeCall.exe	- [Fail] No Register Mask (anding the register) on a Call
		safe.exe			- [Pass] No Violations or IAT Calls; Conforms to REINS Constraints
		wrongMask.exe		- [Fail] Incorrect Mask; Has Mask 0xeffffff0 Instead of 0x0ffffff0


VI. STRUCTURE
=============
    /REINSVerifier
		/Model
            Bits.v                      - Bitvector Definitions, Lemmas, Theorems, etc.
            CheckDeterministic.v        - Proof that the defined x86 parser is Deterministic
            Coqlib.v                    - Commonly Helpful Definitions and Tactics not standard 
                                          in Coq
            Decode.v                    - Parser for the x86 Instructions built by Parser.v 
                                          (bitstrings -> x86 AST)
            Makefile
            Maps.v                      - Finite Map Library 
            Monad.v                     - Monad Class 
            Parser.v                    - Parsers based on Derivatives; See the RockSalt paper. 
            ParserTest.v            
            RTL.v                       - The RTL Language; See the RockSalt paper.
            Tacs.v                      - Helpful Tactics
            X86Semantics.v              - Specification of x86 Semantics, Using the RTL Library
            X86Syntax.v                 - AST for x86 
		/REINS
            CompiledDFAs.v              - Hard Coded Output of DFACompiler.v
            DFACompiler.v               - Constructs the DFAs (3xREINSjmp, dir and indirect flow)
            DFACorrectness.v			- Proofs of Correctness for the Generated DFAs		
            Int32.v                     - Lemmas needed for Integer Arithmetic
            Makefile
            PEFormat.v                  - Definitions for Portable Executables (PEs)
            PETraversal.v               - Parser for Portable Executables (PEs)
            REINSjmp.v                  - Lemmas for Masked (REINS) Jumps
			reinsverif.ml
            reinsverif.mli              
            ReinsVerifier.v             - Coq Version of the Verifier
            ReinsVerifierCorrectness.v  - Proof of Verifier Correctness 
            ReinsVerifierDFA.v          - Definitions of DFAs used by the Verifier to 
                                          Classify Instructions
            X86Lemmas.v                 - Lemmas about x86 Semantics
		/Test							- See Section V. TESTING (EXEs)
            callNotAtEnd.exe
            callThruIAT.exe
            check.ml
            interrupt.exe
            Makefile
            maskOnWrongReg.exe
            noAndBeforeCall.exe
            nop.exe
            safe.exe
            syscall.exe 
            wrongMask.exe
		Makefile
		README


VII. IMPORTANT NOTES
====================
    To work around some memory issues in Coq, the process of converting the
    grammars defined in Model/Decode.v and REINS/ReinsVerifierDFA.v to DFAs for
    efficient matching is done as a separate manual step. This conversion is done
    by DFACompiler.v, and the output is manually put in CompiledDFAs.v.
    DFACompiler.v is not part of the standard compilation process (i.e. it is not
    referenced in the Makefiles), but must be run any time any of the grammars are
    modified.

	The format of sections were changed due to speed, memory, and crash 
    concerns; what was a list of bytes is now a list of list of bytes.  Also note 
	that each section contains bounds information that is checked against the low 
	memory boundary. 

    To avoid updating reinsverif.ml each time changes are made, Word.int 
    (in RockSalt) was changed to Word.wint (in REINS--in other words this for 
    compatibility with OCaml).  

    Incidenlty, the Windows versions of Coq seem to compile quicker than that of Mac.


VIII. REINS & THE REINS VERIFIER
================================
    REINS is "the first, purely static, CISC native code REwriting and IN-lining 
    System, that requires no cooperation from code-producers"; that is, no source 
    code, debugging symbols, or special information is required (for REINS) to 
    produce 'safe' code.  
    
    REINS is designed with "a set of novel techniques to support binary families 
    for which fully correct automated disassembly is provably undecidable, including 
    those that contain computed jumps, dynamic linking, static data interleaved with 
    code, and untrusted callback functions invoked by the OS".

    This project, the REINS Verifier, is a separate verifier (from REINS) that
    formally certifies (REINS) rewritten binaries are policy-adherent; effectively 
    minimizing REINS trusted computing base (TCB).  As stated in the REINS paper; 
    "Malicious binaries that defeat the rewriter's analysis might result in 
    rewritten binaries that fail verification or that fail to execute properly, 
    but never in policy violations".
    
    The RockSalt project, a new NaCl checker for the 32-bit x86 (IA-32) processor, 
    consist of many important contributions.  One contribution, the RockSalt x86 
    Coq model, we use as the foundation of the REINS Verifier.
    
    RockSalt's "Coq model of the x86 instruction set architecture has three major 
    stages: (1) a decoder that translates bytes into abstract syntax for instructions,
    (2) a compiler that translates abstract syntax into sequences of RTL (register 
    transfer list) instructions (3) an interpreter for RTL instructions.  The interface
    between the first two components is the definition of the abstract syntax, which 
    is specified using a set of inductive datatype definitions. (Page 2 of the RockSalt 
    paper)  
    
    The majority of RockSalt's x86 Model (i.e., ./Model) has been sufficent for the 
    REINS Verifier; only the Bit.v has required modifications (this due to tighter 
    constraints on a larger set of possible binaries).  RockSalt's NaCl Checker,
    on the other hand, required many modifications in adopting REINS constraints.
    The two most notable examples are the additional DFA's and the need for Portable 
    Executable (PE) functionality. NACL and REINS Constraints are shown below:
      
    NACL Constraints:
        1.  Binary not writeable after load. 
        2.  Statically Linked:
                Start at 0
                text at 64K
        3.  Indirect control flow by nacljump
        4.  Binary padded to nearest page with 'hlt' instruction.
        5.  No instructions overlap the 32Byte boundary.  
        6.  All valid instructions are reachable by fall through disassembly.
        7.  All direct control flow targets valid instructions.

    REINS Constraints:
        1.  All executable sections reside in low memory.
        2.  All exported symbols target low memory chunck boundaries.  
        3.  Static branches target low memory chunck boundaries.
        4.  All non Import Address Tables (IAT) indirect control flow is masked. 
        5.  All IAT indirect control flow have masked return addresses.
                (must end on chunck boundary)
        6.  No trap instructions (int/syscall)
        7.  No instruction spans chunck boundary.
        8.  Fall through disassembly.

    For additional information, please see the REINS and RockSalt papers.  



